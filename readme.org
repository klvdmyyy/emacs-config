#+TITLE: Org-babel Emacs configuration
#+AUTHOR: Klementiev Dmitry <klementievd08@yandex.ru>

Org Babel Emacs configuration.

Something like executable Wiki.

* Fundamental things of my configuration

Remove backup files. Remove warnings and errors from native compilation
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq native-comp-async-report-warnings-errors 'silent)
#+end_src

Do some appearance stuff. Setup cursor and remove UI blobs
#+begin_src emacs-lisp
  ;; Some appearance stuff
  (set-default 'cursor-type '(bar . 1))
  (blink-cursor-mode 0)
  (setq-default cursor-in-non-selected-windows nil)
  (setq bookmark-set-fringe-mark nil)

  (with-eval-after-load 'menu-bar
    (menu-bar-mode 0))
  (with-eval-after-load 'tool-bar
    (tool-bar-mode 0))
  (with-eval-after-load 'scroll-bar
    (scroll-bar-mode 0))
  (with-eval-after-load 'fringe
    (fringe-mode 8))
#+end_src

Face/Frame configuration. Setup fonts and cool built-in Emacs UI things
/Maybe I don't need to use relative line numbers/
#+begin_src emacs-lisp
  (defun load-face-attributes ()
    (set-face-attribute 'default nil :font "JetBrains Mono" :height 130)
    (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height 130)
    (set-face-attribute 'variable-pitch nil :font "JetBrains Mono" :height 130 :weight 'regular))

  (defun load-face-attributes-to-frame (frame)
    (select-frame frame)
    (load-face-attributes))

  (if (daemonp)
      (add-hook 'after-make-frame-functions #'load-face-attributes-to-frame)
    (load-face-attributes))

  (column-number-mode)
  (setq-default display-line-numbers 'relative) ; CHECKTHIS
  (global-display-line-numbers-mode t)
#+end_src

Initialize =straight.el=
#+begin_src emacs-lisp
  ;; Initialize straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Display startup time. /(I use emacs as daemon and I don't really need it)/
#+begin_src emacs-lisp
  ;; Startup time
  (let ((emacs-start-time (current-time)))
    (add-hook 'emacs-startup-hook
              (lambda ()
                (let ((elapsed (float-time (time-subtract (current-time) emacs-start-time))))
                  (message "[Emacs initialized in %.3fs]" elapsed)))))
#+end_src

* Features. I call it Features

A lot of features inspired from [[https://git.sr.ht/~abcdw/rde][Guix RDE]]

** Installing packages

Yeap. I install all packages in one code block at one time. I like it

*** Appearance related packages

#+begin_src emacs-lisp
  (straight-use-package 'kaolin-themes)
  (straight-use-package 'monokai-pro-theme)
  (straight-use-package 'rainbow-delimiters)
  (straight-use-package 'rainbow-mode)
#+end_src

*** Good text editing

#+begin_src emacs-lisp
  (straight-use-package 'smartparens)
#+end_src

*** Completion and other mini-buffer stuff

#+begin_src emacs-lisp
  (straight-use-package 'vertico)
  (straight-use-package 'mini-frame)
  (straight-use-package 'orderless)
  (straight-use-package 'marginalia)
  (straight-use-package 'pcmpl-args)
  (straight-use-package 'cape)
  (straight-use-package 'consult)
  (straight-use-package 'embark)

  (straight-use-package 'corfu)
  ;; (straight-use-package 'corfu-doc)
  ;; (straight-use-package 'corfu-candidate-overlay)
#+end_src

*** Specific modes for files

I adding auto-mode-alist here. I don't need to use for it separated page

#+begin_src emacs-lisp
  (straight-use-package 'yuck-mode)
  (autoload 'yuck-mode "yuck-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.yuck\\'" . yuck-mode))

  (straight-use-package 'scss-mode)
  (autoload 'scss-mode "scss-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))

  (straight-use-package 'go-mode)
  (autoload 'go-mode "go-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))

  (straight-use-package 'zig-mode)
  (autoload 'zig-mode "zig-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.zig\\'" . zig-mode))
#+end_src

*** IDE packages (and all other packages -_-)

Maybe I don't need =eat= package. Replacements:
- vterm
- coterm
- eshell

#+begin_src emacs-lisp
  (straight-use-package
   '(eat :type git
         :host codeberg
         :repo "akib/emacs-eat"
         :files ("*.el" ("term" "term/*.el") "*.texi"
                 "*.ti" ("terminfo/e" "terminfo/e/*")
                 ("terminfo/65" "terminfo/65/*")
                 ("integration" "integration/*")
                 (:exclude ".dir-locals.el" "*-tests.el"))))

  (straight-use-package
   '(lsp-bridge
     :type git
     :host github
     :repo "manateelazycat/lsp-bridge"))
  
  (straight-use-package
   '(lsp-booster
     :type git
     :host github
     :repo "blahgeek/emacs-lsp-booster"))
#+end_src

** Appearance feature

*** Loading theme

Beatiful themes:
- =monokai-pro=
- =kaolin-*= (i love =kaolin-light=)

#+begin_src emacs-lisp
  ;; (require 'monokai-pro-theme)
  (require 'kaolin-themes)
  (load-theme 'kaolin-light t nil)
#+end_src

*** Rainbow (delimiters) mode

#+begin_src emacs-lisp
  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

I think =rainbow-mode= should be only in CSS/SCSS code
#+begin_src emacs-lisp
  (autoload 'rainbow-mode "rainbow-mode")
  (add-hook 'css-mode-hook 'rainbow-mode)
  (add-hook 'scss-mode-hook 'rainbow-mode)
#+end_src

** Smartparens feature

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'smartparens))

  (autoload 'smartparens-mode "smartparens-autoloads")
  (autoload 'smartparens-strict-mode "smartparens-autoloads")

  (add-hook 'prog-mode-hook 'smartparens-mode)
  (add-hook 'prog-mode-hook 'smartparens-strict-mode)

  (dolist (mode '(emacs-lisp-mode
  		lisp-mode
  		common-lisp-mode
  		scheme-mode))
    (sp-local-pair mode "'" nil :when '(sp-in-string-p))
    (sp-local-pair mode "`" nil :when '(sp-in-string-p)))
#+end_src

** Terminal Emulator feature

I use =eat=

#+begin_src emacs-lisp
  ;; Terminal emulation
  ;;
  ;; I think about switching to `vterm'
  ;; or keep only `eshell'
  ;;
  ;; I use `eat' only for integration with eshell
  ;;
  (autoload 'eat "eat") ; Check in source code
  (autoload 'eat-eshell-mode "eat") ; Check in source code
  (autoload 'eat-eshell-visual-command-mode "eat") ; Check in source code
  (add-hook 'eshell-load-hook #'eat-eshell-mode)
  (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)
#+end_src

** Completion feature

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'marginalia)
    (require 'consult))

  (with-eval-after-load 'minibuffer
    (define-key global-map (kbd "C-x b") 'consult-buffer)
    (define-key global-map (kbd "s-B") 'consult-buffer)
    (define-key global-map (kbd "M-r") 'consult-history)
    (define-key global-map (kbd "M-y") 'consult-yank-pop)
    (define-key global-map (kbd "C-s") 'consult-line)
    (define-key global-map (kbd "C-x C-r") 'consult-recent-file)
    
    (with-eval-after-load
        'mini-frame
      (custom-set-faces
       '(child-frame-border
         ;; TODO: inherit ,(face-attribute 'default :foreground)
         ((t (:background "#000000")))))
      (put 'child-frame-border 'saved-face nil)

      (setq
       mini-frame-show-parameters
       `((top . 0.2)
         (width . 0.8)
         (left . 0.5)
         (child-frame-border-width . 1)))
      (setq mini-frame-detach-on-hide nil)
      (setq mini-frame-color-shift-step 0)
      (setq mini-frame-advice-functions
            '(read-from-minibuffer
              read-key-sequence
              save-some-buffers yes-or-no-p))
      ;; (setq mini-frame-ignore-commands
      ;;       '(consult-line consult-line-multi consult-outline
      ;;                      consult-imenu consult-imenu-multi consult-history
      ;;                      consult-git-grep consult-ripgrep consult-grep
      ;;                      embark-bindings))
      )

    (autoload 'mini-frame-mode "mini-frame")
    (if after-init-time
        (mini-frame-mode 1)
      (add-hook 'after-init-hook 'mini-frame-mode)))

  (with-eval-after-load 'marginalia
    (setq marginalia-align 'left))

  (autoload 'marginalia-mode "marginalia")
  (marginalia-mode 1)
#+end_src

** Vertico feature

#+begin_src emacs-lisp
  ;; Vertico feature
  (eval-when-compile
    (require 'vertico)
    (require 'vertico-multiform))

  (with-eval-after-load 'vertico
    ;; TODO: rde feature-emacs-vertico
    )

  (autoload 'vertico-mode "vertico")
  (if after-init-time
      (vertico-mode 1)
    (add-hook 'after-init-hook 'vertico-mode))

#+end_src

** In-region completion feature (Corfu feature)

#+begin_src emacs-lisp
  ;; Region completion
  (eval-when-compile
    (require 'corfu)
    ;; (require 'corfu-candidate-overlay)
    )

  ;; Check it in source code
  (autoload 'corfu-popupinfo-mode "corfu-popupinfo")

  (with-eval-after-load 'corfu
    (setq corfu-min-width 60)
    (setq corfu-cycle t)
    (setq corfu-quit-no-match t)

    (setq corfu-auto t)

    ;; (setq corfu-doc-auto t)
    (setq corfu-popupinfo-auto t)

    (add-hook 'corfu-mode-hook 'corfu-popupinfo-mode)

    (define-key corfu-map (kbd "M-n") 'corfu-popupinfo-scroll-up)
    (define-key corfu-map (kbd "M-p") 'corfu-popupinfo-scroll-down)
    (define-key corfu-map (kbd "M-d") 'corfu-popupinfo-toggle))

  (autoload 'global-corfu-mode "corfu")
  (global-corfu-mode)

  ;; (setq tab-always-indent 'complete)
#+end_src

** LSP feature

TODO
