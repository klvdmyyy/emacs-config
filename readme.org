#+TITLE: Org-babel Emacs configuration
#+AUTHOR: Klementiev Dmitry <klementievd08@yandex.ru>

Org Babel Emacs configuration.

Something like executable Wiki.

* TODO Roadmap

- [ ] Complete Org configuration (Yea. I need to learn full Org functional)
  - [ ] Org Mode
  - [ ] Org Agenda
  - [ ] Org Babel
  - [ ] Org Contacts
- [ ] +Configure mini-frame (it works laggy)+ (I completely remove it)
- [ ] Complete completion configuring -_-
- [ ] +Configure =ement.el= (Matrix Client. Maybe used as telegram-bridge)+ (I don't use matrix)
- [ ] Configure =telega.el= (Telegram Client)
- [ ] Speed up LSP Bridge Mode

Also I thinking about writing my own Guix distribution and move to it when my archlinux configuration has been complete

* Dependencies

** Listed

*** System packages
#+COMMENT: TODO: `dwebp' and `tgs2png` packages for `telega.el' (Read about dependencies in manual)

- ripgrep
- fd
- ttf-jetbrains-mono
- git
- go
- zig
- python
- make
- gperf
- cmake
- pkg-config
- telegram-tdlib

*** Language servers (etc)

- gopls
- basedpyright
- zls
- clang

*** Python packages

- epc
- orjson
- sexpdata
- six
- setuptools
- paramiko
- rapidfuzz
- watchdog
- packaging

** Installation

#+begin_src sh
  # System packages
  $ yay -Syy python go zig ripgrep fd ttf-jetbrains-mono git \
    make cmake gperf pkg-config telegram-tdlib

  # Python packages
  $ yay -Syy python-epc python-orjson python-sexpdata \
    python-six python-setuptools python-paramiko \
    python-rapidfuzz python-watchdog python-packaging

  # Language Servers (etc)
  $ yay -Syy gopls basedpyright zls clang
#+end_src

* Fundamental things of my configuration

Remove backup files. Remove warnings and errors from native compilation
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq native-comp-async-report-warnings-errors 'silent)
#+end_src

Setup default indentation.
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
#+end_src

Setup input methods
#+begin_src emacs-lisp
  ;; (setq-default default-input-method "russian-computer")
  (setq default-input-method "russian-computer")
#+end_src

Do some appearance stuff. Setup cursor and remove UI blobs
#+begin_src emacs-lisp
  ;; Some appearance stuff
  (set-default 'cursor-type '(bar . 1))
  (blink-cursor-mode 0)
  (setq-default cursor-in-non-selected-windows nil)
  (setq bookmark-set-fringe-mark nil)

  (with-eval-after-load 'menu-bar
    (menu-bar-mode 0))
  (with-eval-after-load 'tool-bar
    (tool-bar-mode 0))
  (with-eval-after-load 'scroll-bar
    (scroll-bar-mode 0))
  (with-eval-after-load 'fringe
    (fringe-mode 8))
#+end_src

Face/Frame configuration. Setup fonts and cool built-in Emacs UI things
/Maybe I don't need to use relative line numbers/
#+begin_src emacs-lisp
  (defun load-face-attributes ()
    (set-face-attribute 'default nil :font "JetBrains Mono" :height 130)
    (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height 130)
    (set-face-attribute 'variable-pitch nil :font "JetBrains Mono" :height 130 :weight 'regular))

  (defun load-face-attributes-to-frame (frame)
    (select-frame frame)
    (load-face-attributes))

  (if (daemonp)
      (add-hook 'after-make-frame-functions #'load-face-attributes-to-frame)
    (load-face-attributes))

  (column-number-mode)
  (setq display-line-numbers-type 'relative) ; CHECKTHIS
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
  		        term-mode-hook
  		        eshell-mode-hook
                  org-agenda-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Initialize =straight.el=
#+begin_src emacs-lisp
  ;; Initialize straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Features. I call it Features

A lot of features inspired from [[https://git.sr.ht/~abcdw/rde][Guix RDE]]

** Installing packages

#+begin_src emacs-lisp :noweb yes :noweb-prefix no
  (setq my-packages '(
<<packages>>
                        ))

  (dolist (package my-packages)
    (straight-use-package package))
#+end_src

** Appearance feature

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  ;; kaolin-themes
  ;; doom-themes
  ;; monokai-pro-theme
  ;; zenburn-theme
  ;; spacemacs-theme
  solarized-theme
  rainbow-delimiters
  rainbow-mode

#+end_src

*** Loading theme

#+begin_src emacs-lisp
  (require 'solarized-theme)
  (load-theme 'solarized-light t nil)
#+end_src

*** Rainbow (delimiters) mode

#+begin_src emacs-lisp
  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

I think =rainbow-mode= should be only in CSS/SCSS code (and =web-mode=)
#+begin_src emacs-lisp
  (autoload 'rainbow-mode "rainbow-mode")
  (add-hook 'css-mode-hook 'rainbow-mode)
  (add-hook 'scss-mode-hook 'rainbow-mode)
  (add-hook 'web-mode-hook 'rainbow-mode)
#+end_src

** Smartparens feature

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  smartparens
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'smartparens))

  (autoload 'smartparens-mode "smartparens-autoloads")
  (autoload 'smartparens-strict-mode "smartparens-autoloads")

  (add-hook 'prog-mode-hook 'smartparens-mode)
  (add-hook 'prog-mode-hook 'smartparens-strict-mode)

  (dolist (mode '(emacs-lisp-mode
    		lisp-mode
    		common-lisp-mode
    		scheme-mode))
    (sp-local-pair mode "'" nil :when '(sp-in-string-p))
    (sp-local-pair mode "`" nil :when '(sp-in-string-p)))

  (defun indent-between-pair (&rest _ignored)
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))

  (sp-local-pair 'prog-mode "{" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "[" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET")))
#+end_src

** Org feature

It contains all code related to *Org Mode*

*** Improving the Look

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  org-bullets
#+end_src

#+begin_src emacs-lisp
  (dolist (mode '(org-indent-mode
                  org-bullets-mode
                  visual-line-mode))
    (add-hook 'org-mode-hook mode))
#+end_src

*** Agenda things

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  ;; org-contacts ; For contacts management (`mu4e-contacts' - alternative)
  ;; mu4e-contacts ; Alternative: `org-contacts'
#+end_src

#+begin_src emacs-lisp
  ;; (setq org-agenda-files
  ;;       (directory-files-recursively "~/projects/org/" "\\.org$"))
#+end_src

** Terminal Emulator feature

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  (eat :type git
       :host codeberg
       :repo "akib/emacs-eat"
       :files ("*.el" ("term" "term/*.el") "*.texi"
               "*.ti" ("terminfo/e" "terminfo/e/*")
               ("terminfo/65" "terminfo/65/*")
               ("integration" "integration/*")
               (:exclude ".dir-locals.el" "*-tests.el")))
#+end_src

I use =eat=

#+begin_src emacs-lisp
  ;; Terminal emulation
  ;;
  ;; I think about switching to `vterm'
  ;; or keep only `eshell'
  ;;
  ;; I use `eat' only for integration with eshell
  ;;
  (autoload 'eat "eat") ; Check in source code
  (autoload 'eat-eshell-mode "eat") ; Check in source code
  (autoload 'eat-eshell-visual-command-mode "eat") ; Check in source code
  (add-hook 'eshell-load-hook #'eat-eshell-mode)
  (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)
#+end_src

** Completion feature

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  ;; mini-frame
  orderless
  marginalia
  ;; pcmpl-args
  ;; cape
  consult
  ;; embark
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'marginalia)
    (require 'consult))

  (with-eval-after-load 'minibuffer
    ;; (define-key global-map (kbd "C-x b") 'consult-buffer)
    (define-key global-map (kbd "s-B") 'consult-buffer)
    (define-key global-map (kbd "M-r") 'consult-history)
    (define-key global-map (kbd "M-y") 'consult-yank-pop)
    (define-key global-map (kbd "C-s") 'consult-line)
    (define-key global-map (kbd "C-x C-r") 'consult-recent-file)

    (defun completion--mode-buffers (&rest modes)
      "Return a list of buffers that are derived from MODES in `buffer-list'."
      (cl-remove-if-not
       (lambda (buffer)
         (with-current-buffer buffer
           (cl-some 'derived-mode-p modes)))
       (buffer-list)))

    (setq orderless-component-separator
          'orderless-escapable-split-on-space) 

    (require 'orderless)
    (setq completion-styles '(orderless basic))
    (setq completion-category-defaults nil)
    (setq enable-recursive-minibuffers t))

  (with-eval-after-load 'marginalia
    (setq marginalia-align 'left))

  (autoload 'marginalia-mode "marginalia")
  (marginalia-mode 1)
#+end_src

** Vertico feature

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  vertico
#+end_src

#+begin_src emacs-lisp
  ;; Vertico feature
  (eval-when-compile
    (require 'vertico)
    (require 'vertico-multiform))

  (with-eval-after-load 'vertico
    ;; TODO: rde feature-emacs-vertico
    )

  (autoload 'vertico-mode "vertico")
  (if after-init-time
      (vertico-mode 1)
    (add-hook 'after-init-hook 'vertico-mode))

#+end_src

** TODO Specific modes

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  yuck-mode
  (scss-mode
   :type git
   :host github
   :repo "klvdmyyy/scss-mode")
  go-mode
  zig-mode
  web-mode
  nasm-mode
  cmake-mode
#+end_src

#+begin_src emacs-lisp
  (autoload 'yuck-mode "yuck-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.yuck\\'" . yuck-mode))

  (autoload 'scss-mode "scss-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))

  (autoload 'go-mode "go-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))

  (autoload 'zig-mode "zig-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.zig\\'" . zig-mode))

  (autoload 'nasm-mode "nasm-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.nasm\\'" . nasm-mode))

  (autoload 'cmake-mode "cmake-mode" nil t)
  (setq auto-mode-alist
        (append
         '(("CMakeLists\\.txt\\'" . cmake-mode)
           ("\\.cmake\\'" . cmake-mode))
         auto-mode-alist))
#+end_src

Associate =.tmpl= files with HTML
#+begin_src emacs-lisp
  (autoload 'web-mode "web-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.tmpl\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))

  (add-hook 'web-mode-hook (lambda () (smartparens-mode 0)))
#+end_src

** LSP feature

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  markdown-mode
  yasnippet
  (lsp-bridge
   :type git
   :host github
   :repo "manateelazycat/lsp-bridge"
   :files ("*.el" "*.py"
           ("acm" "acm/*.el"
            ("icons" "acm/icons/*.svg"))
           ("core" "core/*.py"
            ("handler" "core/handler/*.py"
             ("jdtls" "core/handler/jdtls/*.py")))
           ("langserver" "langserver/*.json")
           ("multiserver" "multiserver/*.json")
           ("resources" "resources/*")))
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'lsp-bridge))
  (with-eval-after-load 'lsp-bridge
    (add-hook 'python-mode-hook 'lsp-bridge-mode)
    (add-hook 'go-mode-hook 'lsp-bridge-mode)
    (add-hook 'zig-mode-hook 'lsp-bridge-mode)
    (add-hook 'c-mode 'lsp-bridge-mode)
    (add-hook 'c++-mode 'lsp-bridge-mode)
    (add-hook 'c-or-c++-mode 'lsp-bridge-mode))
#+end_src

** Git feature

#+begin_src emacs-lisp :tangle no :noweb-ref packages
  magit
  magit-todos
  ;; git-link
  ;; git-timemachine
  ;; git-gutter-fringe
  ;; git-gutter-transient
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'magit
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-local-branches
                            'magit-insert-stashes))
  (defvar magit-buffer-source
    `(:name "Magit"
            :narrow ?t
            :category buffer
            :state ,'consult--buffer-state
            :items ,(lambda ()
                      (mapcar 'buffer-name
                              (completion--mode-buffers
                               'magit-mode))))
    "Source for Magit buffers to be set in `consult-buffer-sources'.")
  (with-eval-after-load 'consult
    (add-to-list 'consult-buffer-sources
                 magit-buffer-source 'append))
#+end_src

** Telegram feature

Emacs Lisp Dependencies
#+begin_src emacs-lisp :tangle no :noweb-ref packages
  visual-fill-column
  rainbow-identifiers
#+end_src

Telegram Client package
#+begin_src emacs-lisp :tangle no :noweb-ref packages
  telega
#+end_src

#+begin_src emacs-lisp
  (require 'telega)
  (setq telega-server-libs-prefix "/usr")

  (defvar telega-buffer-source
    `(:name "Telega"
            :narrow ?t
            :category buffer
            :state ,'consult--buffer-state
            :items ,(lambda ()
                      (mapcar 'buffer-name
                              (completion--mode-buffers
                               'telega-chat-mode
                               'telega-root-mode))))
    "Source for Telega buffers to be set in `consult-buffer-sources'.")
  (with-eval-after-load 'consult
    (add-to-list 'consult-buffer-sources
                 telega-buffer-source 'append))
#+end_src
