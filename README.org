#+TITLE: klvdmyyy's org-babel based Emacs configuration
#+LANGUAGE: en
#+OPTIONS: H:5 toc:nil creator:nil email:nil author:t timestamp:t tags:nil tex:verbatim
#+PROPERTY: header-args :results silent :noweb no-export

* A little about

This is my Emacs configuration file that loaded with =org-babel-load-file= in the Emacs init file.

Why I use org-babel?
- Because I have full documented configuration. I never forgot which thing do something.
- It's really crazy!

Why I use Emacs?
- I like Lisp/Scheme languages
- I don't need functionality from VSCode.
- And I don't like (neo)vim

What about my main OS?
- My main system is Arch(Void) linux with btrfs and backups for rolling
  - Sway
  - Wofi
  - Emacs
  - Btrfs
  
Roadmap of this configuration
- [ ] Support languages which I use
  - [ ] C/C++
  - [ ] Zig
  - [ ] Rust
  - [ ] Python
  - [ ] Golang
  - [ ] Emacs Lisp
  - [ ] Guile
  - [ ] Assembler
  - [ ] Linker script (=.ld= files)
  - [ ] Toml
  - [ ] Yaml
  - [ ] Docker
  - [ ] Kubernetes
  - [ ] Bash
- [ ] LSP
- [ ] DAP (Debugging)
- [ ] Testing
- [ ] Docker
- [ ] Kubernetes
- [ ] Kafka
- [ ] gRPC
- [ ] Use Guix instead of Emacs package management
- [ ] Maybe use git submodules for site-packages
- [ ] Maybe migrate to Guix (read about RDE)
  - Read [[https://gist.github.com/noah-evans/745c5dabf92fa62078c8d7a6952d790d][github gist]]
  - Read about [[https://github.com/abcdw/rde][rde]]
- [ ] Migrate from Archlinux to Guix/Nix as main OS
- [ ] Maybe use Emacs as window manager
  - [[https://github.com/emacs-exwm/exwm][for x11]]
  - [[https://framagit.org/nll/ewx/-/tree/master][for wayland]]

* First things

Before slow package management we need to setup basic UI

Load default theme and remove unnecessary UI/UX elements.
#+begin_src emacs-lisp
  (load-theme 'modus-vivendi) ; Load default dark theme (light version: `modus-operandi')

  ;; Remove unnecessary UI elements
  (setq frame-title-format "klvdmyyy's GNU Emacs: %b")
  (setq inhibit-splash-screen t)
  (setq ingibit-startup-message t)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (setq use-dialog-box nil)
  (setq redisplay-dont-pause t)
  (setq ring-bell-function 'ignore) ; TODO: Custom ring-bell function
#+end_src

Setup font and time indication
#+begin_src emacs-lisp
  (set-frame-font "JetBrains Mono 12" nil t)
  (setq word-wrap t)
  (global-visual-line-mode t)
  (setq display-time-24hr-format t)
  (display-time-mode t)
  (size-indication-mode t)
#+end_src

Remove backup/autosave files (WARN)
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq auto-save-list-file-name nil)
#+end_src

* Package management

In =early-init.el= we disable =package.el=. Now we need to setup =straight.el= instead.
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (setq straight-repository-branch "develop")
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	(url-retrieve-synchronously
  	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
  	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Completely full straight setup =)
#+begin_src emacs-lisp
  (setq use-package-always-ensure nil
        use-package-verbose 'debug)

  (use-package straight
    :custom
    (straight-host-usernames '((github . "klvdmyyy")))
    (straight-use-package-by-default t)
    (straight-register-package 'org)
    (straight-register-package 'org-contrib))

  (use-package diminish)
#+end_src

I want to delegate garbage collection to someone who knows more than I do and made a package for it. The idea is still similar to what I had for years, i.e. large threshold on an idle-timer to do garbage collection. The package just adds some convenience, so I dont have to think about it other than making the threshold large on startup.
#+begin_src emacs-lisp
  (use-package gcmh
    :config
    (setq gcmh-verbose 1)
    (setq gcmh-high-cons-threshold (* 16 1024 1024 1024))
    (gcmh-mode 1))
#+end_src

* Global generic settings

Iâ€™m of the spaces-no-tabs religion:
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 4)
#+end_src

Make life easier if we have sudo, so we can just edit the files and be done with them if possible
#+begin_src emacs-lisp
  (use-package sudo-save)
#+end_src

* Visual

Setup frame/cursor properties
#+begin_src emacs-lisp
  (setq klvdmyyy/cursor-type 'box)
  (setq klvdmyyy/cursor-color "DarkOrange")

  (setq-default frame-background-mode 'dark)
  (set-mouse-color "white")

  ;; Only show cursor in active window
  (setq-default cursor-in-non-selected-windows nil)

  ;; Default frame properties frame position, color, etc
  (setq default-frame-alist
        `((cursor-type . ,klvdmyyy/cursor-type)
          (height . 60) (width . 100)
          (cursor-color . ,klvdmyyy/cursor-color)
          (internal-border-width . 24)
          (mouse-color . "white")))
#+end_src

* Miscellaneous other visual settings follow.

Misc
#+begin_src emacs-lisp
  ;; check speed consequences of this
  (setq column-number-mode t)

  (use-package mic-paren
    :custom
    (paren-highlight-at-point nil)

    :config
    (paren-activate))

  ;; Make underlining nicer
  (setq  underline-minimum-offset 3)

  ;; Show color of '#RRBBGG texts
  (use-package rainbow-mode
    :diminish)

  ;; Give commands the option to display full-screen
  (use-package fullframe)
#+end_src

Optimizations
#+begin_src emacs-lisp
  ;; Font locking has always been the major performance hog for me, so here's the current
  ;; state of variables trying to minimize typing delays. The 3 position indication in
  ;; comments is the  experience playing with it:
  ;;   ? unknown effect
  ;;   ! needed can't change
  ;;   + minor effect, but noticeable
  ;;  ++ major effect, very noticeable
  ;; +++ very high effect on performance (mostly subjective, but supported by some light profiling)
  (setq font-lock-support-mode 'jit-lock-mode)
  (setq jit-lock-defer-time 0)   ;   ?  defer only when input pending
  (setq jit-lock-stealth-time 10) ;  ++ stealth fontification after 5 seconds, nil is slower
#+end_src

* Interactive config functions

OS specific functions. Sometimes I need to add OS-specific functionality and I should use functions for check current OS
#+begin_src emacs-lisp
  (defun system-is-windows ()
    (string-equal system-type "windows-nt"))
  (defun system-is-linux ()
    (string-equal system-type "gnu/linux"))
#+end_src

Firstly I need to quickly open config file
#+begin_src emacs-lisp
  (defun klvdmyyy/open-config ()
    (interactive)
    (find-file config-file))
#+end_src

Secondary I need to quickly open my development folder. TODO: I should rework this =)
#+begin_src emacs-lisp
  (setq klvdmyyy/development-folder "development")

  (when (system-is-windows)
    (defun klvdmyyy/open-dev ()
      (interactive)
      (dired (concat "D:\\" klvdmyyy/development-folder))))

  (when (system-is-linux)
    (defun klvdmyyy/open-dev ()
      (interactive)
      (dired (concat "~/" klvdmyyy/development-folder))))
#+end_src

* TODO User information
